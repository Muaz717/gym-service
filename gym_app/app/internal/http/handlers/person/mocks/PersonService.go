// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Muaz717/gym_app/app/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// NewPersonService creates a new instance of PersonService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPersonService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PersonService {
	mock := &PersonService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PersonService is an autogenerated mock type for the PersonService type
type PersonService struct {
	mock.Mock
}

type PersonService_Expecter struct {
	mock *mock.Mock
}

func (_m *PersonService) EXPECT() *PersonService_Expecter {
	return &PersonService_Expecter{mock: &_m.Mock}
}

// AddPerson provides a mock function for the type PersonService
func (_mock *PersonService) AddPerson(ctx context.Context, person models.Person) (int, error) {
	ret := _mock.Called(ctx, person)

	if len(ret) == 0 {
		panic("no return value specified for AddPerson")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Person) (int, error)); ok {
		return returnFunc(ctx, person)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Person) int); ok {
		r0 = returnFunc(ctx, person)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.Person) error); ok {
		r1 = returnFunc(ctx, person)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersonService_AddPerson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPerson'
type PersonService_AddPerson_Call struct {
	*mock.Call
}

// AddPerson is a helper method to define mock.On call
//   - ctx
//   - person
func (_e *PersonService_Expecter) AddPerson(ctx interface{}, person interface{}) *PersonService_AddPerson_Call {
	return &PersonService_AddPerson_Call{Call: _e.mock.On("AddPerson", ctx, person)}
}

func (_c *PersonService_AddPerson_Call) Run(run func(ctx context.Context, person models.Person)) *PersonService_AddPerson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Person))
	})
	return _c
}

func (_c *PersonService_AddPerson_Call) Return(n int, err error) *PersonService_AddPerson_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *PersonService_AddPerson_Call) RunAndReturn(run func(ctx context.Context, person models.Person) (int, error)) *PersonService_AddPerson_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePerson provides a mock function for the type PersonService
func (_mock *PersonService) DeletePerson(ctx context.Context, pID int) error {
	ret := _mock.Called(ctx, pID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePerson")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = returnFunc(ctx, pID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PersonService_DeletePerson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePerson'
type PersonService_DeletePerson_Call struct {
	*mock.Call
}

// DeletePerson is a helper method to define mock.On call
//   - ctx
//   - pID
func (_e *PersonService_Expecter) DeletePerson(ctx interface{}, pID interface{}) *PersonService_DeletePerson_Call {
	return &PersonService_DeletePerson_Call{Call: _e.mock.On("DeletePerson", ctx, pID)}
}

func (_c *PersonService_DeletePerson_Call) Run(run func(ctx context.Context, pID int)) *PersonService_DeletePerson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *PersonService_DeletePerson_Call) Return(err error) *PersonService_DeletePerson_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PersonService_DeletePerson_Call) RunAndReturn(run func(ctx context.Context, pID int) error) *PersonService_DeletePerson_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllPeople provides a mock function for the type PersonService
func (_mock *PersonService) FindAllPeople(ctx context.Context) ([]models.Person, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAllPeople")
	}

	var r0 []models.Person
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]models.Person, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []models.Person); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Person)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersonService_FindAllPeople_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllPeople'
type PersonService_FindAllPeople_Call struct {
	*mock.Call
}

// FindAllPeople is a helper method to define mock.On call
//   - ctx
func (_e *PersonService_Expecter) FindAllPeople(ctx interface{}) *PersonService_FindAllPeople_Call {
	return &PersonService_FindAllPeople_Call{Call: _e.mock.On("FindAllPeople", ctx)}
}

func (_c *PersonService_FindAllPeople_Call) Run(run func(ctx context.Context)) *PersonService_FindAllPeople_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *PersonService_FindAllPeople_Call) Return(persons []models.Person, err error) *PersonService_FindAllPeople_Call {
	_c.Call.Return(persons, err)
	return _c
}

func (_c *PersonService_FindAllPeople_Call) RunAndReturn(run func(ctx context.Context) ([]models.Person, error)) *PersonService_FindAllPeople_Call {
	_c.Call.Return(run)
	return _c
}

// FindPersonByName provides a mock function for the type PersonService
func (_mock *PersonService) FindPersonByName(ctx context.Context, name string) (models.Person, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for FindPersonByName")
	}

	var r0 models.Person
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (models.Person, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) models.Person); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(models.Person)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersonService_FindPersonByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindPersonByName'
type PersonService_FindPersonByName_Call struct {
	*mock.Call
}

// FindPersonByName is a helper method to define mock.On call
//   - ctx
//   - name
func (_e *PersonService_Expecter) FindPersonByName(ctx interface{}, name interface{}) *PersonService_FindPersonByName_Call {
	return &PersonService_FindPersonByName_Call{Call: _e.mock.On("FindPersonByName", ctx, name)}
}

func (_c *PersonService_FindPersonByName_Call) Run(run func(ctx context.Context, name string)) *PersonService_FindPersonByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PersonService_FindPersonByName_Call) Return(person models.Person, err error) *PersonService_FindPersonByName_Call {
	_c.Call.Return(person, err)
	return _c
}

func (_c *PersonService_FindPersonByName_Call) RunAndReturn(run func(ctx context.Context, name string) (models.Person, error)) *PersonService_FindPersonByName_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePerson provides a mock function for the type PersonService
func (_mock *PersonService) UpdatePerson(ctx context.Context, person models.Person, pID int) (int, error) {
	ret := _mock.Called(ctx, person, pID)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePerson")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Person, int) (int, error)); ok {
		return returnFunc(ctx, person, pID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Person, int) int); ok {
		r0 = returnFunc(ctx, person, pID)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.Person, int) error); ok {
		r1 = returnFunc(ctx, person, pID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersonService_UpdatePerson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePerson'
type PersonService_UpdatePerson_Call struct {
	*mock.Call
}

// UpdatePerson is a helper method to define mock.On call
//   - ctx
//   - person
//   - pID
func (_e *PersonService_Expecter) UpdatePerson(ctx interface{}, person interface{}, pID interface{}) *PersonService_UpdatePerson_Call {
	return &PersonService_UpdatePerson_Call{Call: _e.mock.On("UpdatePerson", ctx, person, pID)}
}

func (_c *PersonService_UpdatePerson_Call) Run(run func(ctx context.Context, person models.Person, pID int)) *PersonService_UpdatePerson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Person), args[2].(int))
	})
	return _c
}

func (_c *PersonService_UpdatePerson_Call) Return(n int, err error) *PersonService_UpdatePerson_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *PersonService_UpdatePerson_Call) RunAndReturn(run func(ctx context.Context, person models.Person, pID int) (int, error)) *PersonService_UpdatePerson_Call {
	_c.Call.Return(run)
	return _c
}
