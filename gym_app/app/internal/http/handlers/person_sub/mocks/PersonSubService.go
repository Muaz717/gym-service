// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Muaz717/gym_app/app/internal/domain/dto"
	"github.com/Muaz717/gym_app/app/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// NewPersonSubService creates a new instance of PersonSubService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPersonSubService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PersonSubService {
	mock := &PersonSubService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PersonSubService is an autogenerated mock type for the PersonSubService type
type PersonSubService struct {
	mock.Mock
}

type PersonSubService_Expecter struct {
	mock *mock.Mock
}

func (_m *PersonSubService) EXPECT() *PersonSubService_Expecter {
	return &PersonSubService_Expecter{mock: &_m.Mock}
}

// AddPersonSub provides a mock function for the type PersonSubService
func (_mock *PersonSubService) AddPersonSub(ctx context.Context, personSubStrDate models.PersonSubscription) (string, error) {
	ret := _mock.Called(ctx, personSubStrDate)

	if len(ret) == 0 {
		panic("no return value specified for AddPersonSub")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.PersonSubscription) (string, error)); ok {
		return returnFunc(ctx, personSubStrDate)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.PersonSubscription) string); ok {
		r0 = returnFunc(ctx, personSubStrDate)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.PersonSubscription) error); ok {
		r1 = returnFunc(ctx, personSubStrDate)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersonSubService_AddPersonSub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPersonSub'
type PersonSubService_AddPersonSub_Call struct {
	*mock.Call
}

// AddPersonSub is a helper method to define mock.On call
//   - ctx
//   - personSubStrDate
func (_e *PersonSubService_Expecter) AddPersonSub(ctx interface{}, personSubStrDate interface{}) *PersonSubService_AddPersonSub_Call {
	return &PersonSubService_AddPersonSub_Call{Call: _e.mock.On("AddPersonSub", ctx, personSubStrDate)}
}

func (_c *PersonSubService_AddPersonSub_Call) Run(run func(ctx context.Context, personSubStrDate models.PersonSubscription)) *PersonSubService_AddPersonSub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.PersonSubscription))
	})
	return _c
}

func (_c *PersonSubService_AddPersonSub_Call) Return(s string, err error) *PersonSubService_AddPersonSub_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *PersonSubService_AddPersonSub_Call) RunAndReturn(run func(ctx context.Context, personSubStrDate models.PersonSubscription) (string, error)) *PersonSubService_AddPersonSub_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePersonSub provides a mock function for the type PersonSubService
func (_mock *PersonSubService) DeletePersonSub(ctx context.Context, number string) error {
	ret := _mock.Called(ctx, number)

	if len(ret) == 0 {
		panic("no return value specified for DeletePersonSub")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, number)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PersonSubService_DeletePersonSub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePersonSub'
type PersonSubService_DeletePersonSub_Call struct {
	*mock.Call
}

// DeletePersonSub is a helper method to define mock.On call
//   - ctx
//   - number
func (_e *PersonSubService_Expecter) DeletePersonSub(ctx interface{}, number interface{}) *PersonSubService_DeletePersonSub_Call {
	return &PersonSubService_DeletePersonSub_Call{Call: _e.mock.On("DeletePersonSub", ctx, number)}
}

func (_c *PersonSubService_DeletePersonSub_Call) Run(run func(ctx context.Context, number string)) *PersonSubService_DeletePersonSub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PersonSubService_DeletePersonSub_Call) Return(err error) *PersonSubService_DeletePersonSub_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PersonSubService_DeletePersonSub_Call) RunAndReturn(run func(ctx context.Context, number string) error) *PersonSubService_DeletePersonSub_Call {
	_c.Call.Return(run)
	return _c
}

// FindPersonSubByPersonId provides a mock function for the type PersonSubService
func (_mock *PersonSubService) FindPersonSubByPersonId(ctx context.Context, personID int) ([]dto.PersonSubResponse, error) {
	ret := _mock.Called(ctx, personID)

	if len(ret) == 0 {
		panic("no return value specified for FindPersonSubByPersonId")
	}

	var r0 []dto.PersonSubResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) ([]dto.PersonSubResponse, error)); ok {
		return returnFunc(ctx, personID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) []dto.PersonSubResponse); ok {
		r0 = returnFunc(ctx, personID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.PersonSubResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, personID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersonSubService_FindPersonSubByPersonId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindPersonSubByPersonId'
type PersonSubService_FindPersonSubByPersonId_Call struct {
	*mock.Call
}

// FindPersonSubByPersonId is a helper method to define mock.On call
//   - ctx
//   - personID
func (_e *PersonSubService_Expecter) FindPersonSubByPersonId(ctx interface{}, personID interface{}) *PersonSubService_FindPersonSubByPersonId_Call {
	return &PersonSubService_FindPersonSubByPersonId_Call{Call: _e.mock.On("FindPersonSubByPersonId", ctx, personID)}
}

func (_c *PersonSubService_FindPersonSubByPersonId_Call) Run(run func(ctx context.Context, personID int)) *PersonSubService_FindPersonSubByPersonId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *PersonSubService_FindPersonSubByPersonId_Call) Return(personSubResponses []dto.PersonSubResponse, err error) *PersonSubService_FindPersonSubByPersonId_Call {
	_c.Call.Return(personSubResponses, err)
	return _c
}

func (_c *PersonSubService_FindPersonSubByPersonId_Call) RunAndReturn(run func(ctx context.Context, personID int) ([]dto.PersonSubResponse, error)) *PersonSubService_FindPersonSubByPersonId_Call {
	_c.Call.Return(run)
	return _c
}

// FindPersonSubByPersonName provides a mock function for the type PersonSubService
func (_mock *PersonSubService) FindPersonSubByPersonName(ctx context.Context, name string) ([]dto.PersonSubResponse, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for FindPersonSubByPersonName")
	}

	var r0 []dto.PersonSubResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]dto.PersonSubResponse, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []dto.PersonSubResponse); ok {
		r0 = returnFunc(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.PersonSubResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersonSubService_FindPersonSubByPersonName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindPersonSubByPersonName'
type PersonSubService_FindPersonSubByPersonName_Call struct {
	*mock.Call
}

// FindPersonSubByPersonName is a helper method to define mock.On call
//   - ctx
//   - name
func (_e *PersonSubService_Expecter) FindPersonSubByPersonName(ctx interface{}, name interface{}) *PersonSubService_FindPersonSubByPersonName_Call {
	return &PersonSubService_FindPersonSubByPersonName_Call{Call: _e.mock.On("FindPersonSubByPersonName", ctx, name)}
}

func (_c *PersonSubService_FindPersonSubByPersonName_Call) Run(run func(ctx context.Context, name string)) *PersonSubService_FindPersonSubByPersonName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PersonSubService_FindPersonSubByPersonName_Call) Return(personSubResponses []dto.PersonSubResponse, err error) *PersonSubService_FindPersonSubByPersonName_Call {
	_c.Call.Return(personSubResponses, err)
	return _c
}

func (_c *PersonSubService_FindPersonSubByPersonName_Call) RunAndReturn(run func(ctx context.Context, name string) ([]dto.PersonSubResponse, error)) *PersonSubService_FindPersonSubByPersonName_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPersonSubs provides a mock function for the type PersonSubService
func (_mock *PersonSubService) GetAllPersonSubs(ctx context.Context) ([]dto.PersonSubResponse, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPersonSubs")
	}

	var r0 []dto.PersonSubResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]dto.PersonSubResponse, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []dto.PersonSubResponse); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.PersonSubResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersonSubService_GetAllPersonSubs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPersonSubs'
type PersonSubService_GetAllPersonSubs_Call struct {
	*mock.Call
}

// GetAllPersonSubs is a helper method to define mock.On call
//   - ctx
func (_e *PersonSubService_Expecter) GetAllPersonSubs(ctx interface{}) *PersonSubService_GetAllPersonSubs_Call {
	return &PersonSubService_GetAllPersonSubs_Call{Call: _e.mock.On("GetAllPersonSubs", ctx)}
}

func (_c *PersonSubService_GetAllPersonSubs_Call) Run(run func(ctx context.Context)) *PersonSubService_GetAllPersonSubs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *PersonSubService_GetAllPersonSubs_Call) Return(personSubResponses []dto.PersonSubResponse, err error) *PersonSubService_GetAllPersonSubs_Call {
	_c.Call.Return(personSubResponses, err)
	return _c
}

func (_c *PersonSubService_GetAllPersonSubs_Call) RunAndReturn(run func(ctx context.Context) ([]dto.PersonSubResponse, error)) *PersonSubService_GetAllPersonSubs_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersonSubByNumber provides a mock function for the type PersonSubService
func (_mock *PersonSubService) GetPersonSubByNumber(ctx context.Context, number string) (dto.PersonSubResponse, error) {
	ret := _mock.Called(ctx, number)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonSubByNumber")
	}

	var r0 dto.PersonSubResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (dto.PersonSubResponse, error)); ok {
		return returnFunc(ctx, number)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) dto.PersonSubResponse); ok {
		r0 = returnFunc(ctx, number)
	} else {
		r0 = ret.Get(0).(dto.PersonSubResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, number)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersonSubService_GetPersonSubByNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonSubByNumber'
type PersonSubService_GetPersonSubByNumber_Call struct {
	*mock.Call
}

// GetPersonSubByNumber is a helper method to define mock.On call
//   - ctx
//   - number
func (_e *PersonSubService_Expecter) GetPersonSubByNumber(ctx interface{}, number interface{}) *PersonSubService_GetPersonSubByNumber_Call {
	return &PersonSubService_GetPersonSubByNumber_Call{Call: _e.mock.On("GetPersonSubByNumber", ctx, number)}
}

func (_c *PersonSubService_GetPersonSubByNumber_Call) Run(run func(ctx context.Context, number string)) *PersonSubService_GetPersonSubByNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PersonSubService_GetPersonSubByNumber_Call) Return(personSubResponse dto.PersonSubResponse, err error) *PersonSubService_GetPersonSubByNumber_Call {
	_c.Call.Return(personSubResponse, err)
	return _c
}

func (_c *PersonSubService_GetPersonSubByNumber_Call) RunAndReturn(run func(ctx context.Context, number string) (dto.PersonSubResponse, error)) *PersonSubService_GetPersonSubByNumber_Call {
	_c.Call.Return(run)
	return _c
}
