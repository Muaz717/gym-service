// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Muaz717/gym_app/app/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

type AuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthService) EXPECT() *AuthService_Expecter {
	return &AuthService_Expecter{mock: &_m.Mock}
}

// CheckToken provides a mock function for the type AuthService
func (_mock *AuthService) CheckToken(ctx context.Context, token string) (models.User, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for CheckToken")
	}

	var r0 models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (models.User, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) models.User); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Get(0).(models.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AuthService_CheckToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckToken'
type AuthService_CheckToken_Call struct {
	*mock.Call
}

// CheckToken is a helper method to define mock.On call
//   - ctx
//   - token
func (_e *AuthService_Expecter) CheckToken(ctx interface{}, token interface{}) *AuthService_CheckToken_Call {
	return &AuthService_CheckToken_Call{Call: _e.mock.On("CheckToken", ctx, token)}
}

func (_c *AuthService_CheckToken_Call) Run(run func(ctx context.Context, token string)) *AuthService_CheckToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AuthService_CheckToken_Call) Return(user models.User, err error) *AuthService_CheckToken_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *AuthService_CheckToken_Call) RunAndReturn(run func(ctx context.Context, token string) (models.User, error)) *AuthService_CheckToken_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function for the type AuthService
func (_mock *AuthService) Login(ctx context.Context, email string, password string) (string, error) {
	ret := _mock.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return returnFunc(ctx, email, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = returnFunc(ctx, email, password)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AuthService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type AuthService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx
//   - email
//   - password
func (_e *AuthService_Expecter) Login(ctx interface{}, email interface{}, password interface{}) *AuthService_Login_Call {
	return &AuthService_Login_Call{Call: _e.mock.On("Login", ctx, email, password)}
}

func (_c *AuthService_Login_Call) Run(run func(ctx context.Context, email string, password string)) *AuthService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AuthService_Login_Call) Return(s string, err error) *AuthService_Login_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *AuthService_Login_Call) RunAndReturn(run func(ctx context.Context, email string, password string) (string, error)) *AuthService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterNewUser provides a mock function for the type AuthService
func (_mock *AuthService) RegisterNewUser(ctx context.Context, email string, password string) (int64, error) {
	ret := _mock.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for RegisterNewUser")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (int64, error)); ok {
		return returnFunc(ctx, email, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) int64); ok {
		r0 = returnFunc(ctx, email, password)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AuthService_RegisterNewUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterNewUser'
type AuthService_RegisterNewUser_Call struct {
	*mock.Call
}

// RegisterNewUser is a helper method to define mock.On call
//   - ctx
//   - email
//   - password
func (_e *AuthService_Expecter) RegisterNewUser(ctx interface{}, email interface{}, password interface{}) *AuthService_RegisterNewUser_Call {
	return &AuthService_RegisterNewUser_Call{Call: _e.mock.On("RegisterNewUser", ctx, email, password)}
}

func (_c *AuthService_RegisterNewUser_Call) Run(run func(ctx context.Context, email string, password string)) *AuthService_RegisterNewUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AuthService_RegisterNewUser_Call) Return(n int64, err error) *AuthService_RegisterNewUser_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *AuthService_RegisterNewUser_Call) RunAndReturn(run func(ctx context.Context, email string, password string) (int64, error)) *AuthService_RegisterNewUser_Call {
	_c.Call.Return(run)
	return _c
}
