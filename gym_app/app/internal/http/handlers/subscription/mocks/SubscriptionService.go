// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Muaz717/gym_app/app/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// NewSubscriptionService creates a new instance of SubscriptionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscriptionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubscriptionService {
	mock := &SubscriptionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SubscriptionService is an autogenerated mock type for the SubscriptionService type
type SubscriptionService struct {
	mock.Mock
}

type SubscriptionService_Expecter struct {
	mock *mock.Mock
}

func (_m *SubscriptionService) EXPECT() *SubscriptionService_Expecter {
	return &SubscriptionService_Expecter{mock: &_m.Mock}
}

// AddSubscription provides a mock function for the type SubscriptionService
func (_mock *SubscriptionService) AddSubscription(ctx context.Context, subscription models.Subscription) (int, error) {
	ret := _mock.Called(ctx, subscription)

	if len(ret) == 0 {
		panic("no return value specified for AddSubscription")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Subscription) (int, error)); ok {
		return returnFunc(ctx, subscription)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Subscription) int); ok {
		r0 = returnFunc(ctx, subscription)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.Subscription) error); ok {
		r1 = returnFunc(ctx, subscription)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SubscriptionService_AddSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSubscription'
type SubscriptionService_AddSubscription_Call struct {
	*mock.Call
}

// AddSubscription is a helper method to define mock.On call
//   - ctx
//   - subscription
func (_e *SubscriptionService_Expecter) AddSubscription(ctx interface{}, subscription interface{}) *SubscriptionService_AddSubscription_Call {
	return &SubscriptionService_AddSubscription_Call{Call: _e.mock.On("AddSubscription", ctx, subscription)}
}

func (_c *SubscriptionService_AddSubscription_Call) Run(run func(ctx context.Context, subscription models.Subscription)) *SubscriptionService_AddSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Subscription))
	})
	return _c
}

func (_c *SubscriptionService_AddSubscription_Call) Return(n int, err error) *SubscriptionService_AddSubscription_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *SubscriptionService_AddSubscription_Call) RunAndReturn(run func(ctx context.Context, subscription models.Subscription) (int, error)) *SubscriptionService_AddSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSubscription provides a mock function for the type SubscriptionService
func (_mock *SubscriptionService) DeleteSubscription(ctx context.Context, subID int) error {
	ret := _mock.Called(ctx, subID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscription")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = returnFunc(ctx, subID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SubscriptionService_DeleteSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubscription'
type SubscriptionService_DeleteSubscription_Call struct {
	*mock.Call
}

// DeleteSubscription is a helper method to define mock.On call
//   - ctx
//   - subID
func (_e *SubscriptionService_Expecter) DeleteSubscription(ctx interface{}, subID interface{}) *SubscriptionService_DeleteSubscription_Call {
	return &SubscriptionService_DeleteSubscription_Call{Call: _e.mock.On("DeleteSubscription", ctx, subID)}
}

func (_c *SubscriptionService_DeleteSubscription_Call) Run(run func(ctx context.Context, subID int)) *SubscriptionService_DeleteSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *SubscriptionService_DeleteSubscription_Call) Return(err error) *SubscriptionService_DeleteSubscription_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SubscriptionService_DeleteSubscription_Call) RunAndReturn(run func(ctx context.Context, subID int) error) *SubscriptionService_DeleteSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllSubscriptions provides a mock function for the type SubscriptionService
func (_mock *SubscriptionService) FindAllSubscriptions(ctx context.Context) ([]models.Subscription, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAllSubscriptions")
	}

	var r0 []models.Subscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]models.Subscription, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []models.Subscription); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Subscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SubscriptionService_FindAllSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllSubscriptions'
type SubscriptionService_FindAllSubscriptions_Call struct {
	*mock.Call
}

// FindAllSubscriptions is a helper method to define mock.On call
//   - ctx
func (_e *SubscriptionService_Expecter) FindAllSubscriptions(ctx interface{}) *SubscriptionService_FindAllSubscriptions_Call {
	return &SubscriptionService_FindAllSubscriptions_Call{Call: _e.mock.On("FindAllSubscriptions", ctx)}
}

func (_c *SubscriptionService_FindAllSubscriptions_Call) Run(run func(ctx context.Context)) *SubscriptionService_FindAllSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SubscriptionService_FindAllSubscriptions_Call) Return(subscriptions []models.Subscription, err error) *SubscriptionService_FindAllSubscriptions_Call {
	_c.Call.Return(subscriptions, err)
	return _c
}

func (_c *SubscriptionService_FindAllSubscriptions_Call) RunAndReturn(run func(ctx context.Context) ([]models.Subscription, error)) *SubscriptionService_FindAllSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSubscription provides a mock function for the type SubscriptionService
func (_mock *SubscriptionService) UpdateSubscription(ctx context.Context, subscription models.Subscription, subID int) (int, error) {
	ret := _mock.Called(ctx, subscription, subID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubscription")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Subscription, int) (int, error)); ok {
		return returnFunc(ctx, subscription, subID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Subscription, int) int); ok {
		r0 = returnFunc(ctx, subscription, subID)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.Subscription, int) error); ok {
		r1 = returnFunc(ctx, subscription, subID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SubscriptionService_UpdateSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSubscription'
type SubscriptionService_UpdateSubscription_Call struct {
	*mock.Call
}

// UpdateSubscription is a helper method to define mock.On call
//   - ctx
//   - subscription
//   - subID
func (_e *SubscriptionService_Expecter) UpdateSubscription(ctx interface{}, subscription interface{}, subID interface{}) *SubscriptionService_UpdateSubscription_Call {
	return &SubscriptionService_UpdateSubscription_Call{Call: _e.mock.On("UpdateSubscription", ctx, subscription, subID)}
}

func (_c *SubscriptionService_UpdateSubscription_Call) Run(run func(ctx context.Context, subscription models.Subscription, subID int)) *SubscriptionService_UpdateSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Subscription), args[2].(int))
	})
	return _c
}

func (_c *SubscriptionService_UpdateSubscription_Call) Return(n int, err error) *SubscriptionService_UpdateSubscription_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *SubscriptionService_UpdateSubscription_Call) RunAndReturn(run func(ctx context.Context, subscription models.Subscription, subID int) (int, error)) *SubscriptionService_UpdateSubscription_Call {
	_c.Call.Return(run)
	return _c
}
